/*
Given an array A[] of integers, sort the array according to frequency of elements. That is elements that have higher frequency come first. If frequencies of two elements are same, then smaller number comes first.

Input:
The first line of input contains an integer T denoting the number of test cases. The description of T test cases follows. The first line of each test case contains a single integer N denoting the size of array. The second line contains N space-separated integers A1, A2, ..., AN denoting the elements of the array.

Output:
For each testcase, in a new line, print each sorted array in a seperate line. For each array its numbers should be seperated by space.

Constraints:
1 ≤ T ≤ 70
30 ≤ N ≤ 130
1 ≤ Ai ≤ 60 

Example:
Input:
2
5
5 5 4 6 4
5
9 9 9 2 5

Output:
4 4 5 5 6
9 9 9 2 5
*/

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
		//code
		Scanner sc = new Scanner(System.in);
		int t=sc.nextInt();
	
		for(int i=0;i<t;i++)
		{
		    int num=sc.nextInt();
		  	int arr[]=new int[num];
		    for(int j=0;j<num;j++)
		    {
		        int n=sc.nextInt();
		        arr[j]=n;
		    }
		
		Map<Integer,Integer> map=new HashMap<>();
		List<Integer> out=new ArrayList<Integer>();
		
		for(int current:arr)
		{
		    int count=map.getOrDefault(current,0);
		    map.put(current,count+1);
		    out.add(current);
		}
		SortComparator comp=new SortComparator(map);
		
		Collections.sort(out,comp);
		
		for(int k:out)
		System.out.print(k+" ");
		System.out.println();
		}
	}
	
}

class SortComparator implements Comparator<Integer>
{
    Map<Integer,Integer> freqMap;
    
    SortComparator(Map<Integer,Integer> tfreqMap)
    {
        this.freqMap=tfreqMap;
        
    }
    
    public int compare(Integer k1,Integer k2)
    {
        int f=freqMap.get(k2).compareTo(freqMap.get(k1));
        int value=k1.compareTo(k2);
        
        if(f==0)
        return value;
        else 
        return f;
    }
}
